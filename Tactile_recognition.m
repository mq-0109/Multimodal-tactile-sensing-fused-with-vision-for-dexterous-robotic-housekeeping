function [y1] = Tactile_recognition(x1)
%GARBAGE_0516 neural network simulation function.
%
% Auto-generated by MATLAB, 16-May-2023 08:33:21.
% 
% [y1] = garbage_0516(x1) takes these arguments:
%   x = 8xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00332245763440797;-0.00264700503144599;-0.00128084136465212;0.00291557767888184;-0.00767176333333519;-0.00568073393939383;-0.00508574944153573;-0.0104168096396384];
x1_step1.gain = [128.919598788702;303.655682658631;202.367953622214;110.100718927119;77.2592263020191;241.945136823823;329.588736141327;69.0106760355164];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.0178253146477862501;0.59200717286085302593;-1.1321215334855663226;-0.06385669034588618842;0.10351599325361698911;-0.17157245620692893051;-0.034400534906653151834;-0.62808807665740995496;1.6315412296215974219;-1.8487074612637781623];
IW1_1 = [0.42524887580372866536 0.56442580741159653623 -0.38082825547565790636 0.094301035962852206018 0.88935263859600377501 0.60343844995539730469 -1.090766320336276296 0.22452167352964083613;-0.54780118089040030771 -1.7121284823158613442 -1.0998370498318537081 0.019934296810389939836 0.4161774919056960842 0.41106546742737648525 0.78915533615552857505 -0.80158632001469976025;0.78831681064764069777 0.82211095486961938139 0.83836985813586428762 0.47738493556163069664 0.33262136569872641223 0.93761864669750549783 -0.32582236856905300026 0.13041347499719366243;0.5712838880276870368 0.59865834466066680797 0.31716180699896667772 -0.42534467083354748906 -0.24775021534892421871 1.0663688735493159765 -0.55789814819681959879 -1.3463593983538404419;-0.75968162979268072377 -0.90335029768872876499 0.56623120741390220445 -0.92937530302953830219 -0.093780284425618962163 -0.7302827091201609111 0.29374655194565324479 0.53608310809694004195;0.082553448882214386373 1.1941788700281847913 0.45370719862601854855 0.67980491839809908949 -0.43815767537192240599 1.1501824189293201606 -0.39538173941436227654 0.62200162943310510766;-0.49241214116531534239 1.4477577975293909329 1.2932042679099193805 -1.3391992376634140882 -0.38285066261099376383 -0.26419944262945044278 0.82688823697248126088 -0.023507805793418129481;-0.3309250926304157514 -0.74774673569740268686 -0.70178863174332850594 -0.86383884244543596154 0.77552898724699614874 0.85886705779637084746 0.62590422379708032796 -0.37020186477793437518;1.0434636804148478273 -0.56792483369943325133 0.059960160160453718214 0.092780627787683922492 -1.0001207364383626341 0.086547841488530938281 -0.29006922886899161318 0.74815996505133131045;-0.79708794406036387326 0.14932695933461931359 -0.22610602658175085744 -0.74564260057065800957 -0.36757358975632270504 0.40642209660206357613 0.86199253046759782837 -1.22449699184043026];

% Layer 2
b2 = [0.50426480174064380879;0.11828729408363100606;0.62195309087684735871];
LW2_1 = [0.98703021168352400583 0.68924634114954486108 -0.44866539479369260679 -1.0348686237549820088 1.0288128845787756216 -0.20801943223335267463 -0.96084751310433724747 0.36600287737839609647 -0.68329728915335097295 0.4868966146577626275;0.45518139872538060375 -1.1726439874975154165 0.35374586499664378847 0.09871008873674058659 0.39008920806846031359 -0.055065747490558911159 1.7434284592657043333 -0.44915645694553774092 -0.78490529259663932571 -0.67701729330635651571;0.44556792407991463456 0.83002401629509214853 -0.13302852649459639967 0.24057712938427794347 -0.63476970519661601866 0.10890969133034075766 -0.14361153297482934232 0.49223712060719254646 0.20808176972844144581 0.56028773321081148939];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
